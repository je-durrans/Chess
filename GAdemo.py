"""
from chess import *

bestEvolvedPlayer = [146, 43, 30, 0, 13, 0, 447, 0, 0, 25, 0, 46, 109, 23, 70, 75, 0, 0, 38, 0, 0, 0, 0, 37, 78, 0, 0, 0, 152, 97, 0, 0, 0, 0, 0, 0, 0, 18, 0, 167, 0, 85, 71, 23, 62, 67, 406, 0, 85, 388, 0, 0, 0, 669, 0, 26, 1, 0, 9, 13, 0, 0, 0, 0, 0, 0, 56, 275, 0, 65, 0, 0, 0, 0, 0, 214, 22, 0, 56, 0, 7, 0, 23, 21, 54, 15, 21, 25, 19, 0, 0, 0, 644, 0, 0, 0, 104, 56, 16, 0, 0, 0, 0, 0, 0, 72, 0, 57, 999, 0, 35, 0, 0, 33, 0, 0, 0, 27, 0, 0, 0, 110, 218, 0, 0, 0, 0, 30, 0, 114, 0, 619, 0, 0, 63, 0, 0, 103, 29, 0, 0, 0, 0, 0, 0, 0, 0, 809, 32, 135, 21, 0, 0, 0, 600, 0, 0, 0, 15, 902, 0, 0, 793, 0, 0, 0, 368, 355, 0, 0, 12, 0, 0, 122, 0, 67, 54, 0, 0, 603, 0, 139, 112, 0, 0, 0, 0, 0, 0, 0, 166, 0, 0, 0, 60, 0, 0, 395, 0, 860, 59, 23, 0, 0, 110, 0, 35, 37, 0, 0, 14, 30, 47, 84, 111, 0, 576, 77, 0, 70, 0, 0, 2, 0, 64, 609, 798, 0, 0, 0, 0, 607, 0, 0, 50, 30, 653, 81, 305, 0, 138, 0, 0, 0, 0, 22, 0, 720, 0, 82, 97, 0, 639, 0, 1000, 575, 259, 286, 0, 14, 70, 0, 0, 0, 0, 564, 32, 15, 209, 0, 464, 0, 34, 0, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 146, 0, 0, 0, 0, 0, 332, 0, 0, 882, 0, 994, 0, 93, 0, 0, 0, 699, 277, 0, 57, 131, 42, 68, 497, 0, 0, 0, 379, 1000, 729, 1, 100, 3, 494, 28, 13, 0, 0, 0, 0, 0, 0, 264, 63, 0, 654, 107, 0, 0, 73, 0, 105, 11, 17, 72, 0, 0, 12, 0, 538, 0, 6, 276, 945, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 65, 183, 17, 7, 0, 1000, 0, 0, 600, 71, 0, 78, 974, 785]
randomOpponent = [998, 174, 657, 850, 87, 329, 366, 66, 704, 185, 376, 210, 93, 790, 495, 842, 804, 992, 282, 744, 54, 586, 117, 729, 908, 274, 972, 557, 987, 448, 707, 307, 484, 754, 882, 50, 470, 721, 116, 378, 580, 348, 130, 429, 468, 176, 783, 444, 156, 765, 764, 906, 133, 388, 689, 449, 470, 744, 102, 340, 480, 563, 10, 553, 223, 345, 43, 743, 94, 549, 950, 452, 25, 476, 532, 200, 908, 586, 388, 323, 772, 100, 55, 177, 403, 251, 730, 884, 700, 682, 263, 759, 832, 411, 907, 697, 819, 327, 640, 660, 569, 516, 625, 843, 986, 792, 477, 504, 405, 581, 667, 490, 662, 961, 89, 956, 465, 479, 580, 448, 732, 993, 880, 352, 161, 471, 182, 730, 726, 738, 706, 618, 318, 87, 355, 128, 492, 961, 498, 716, 958, 286, 964, 268, 937, 734, 534, 993, 310, 408, 685, 935, 500, 225, 291, 905, 312, 319, 193, 392, 762, 973, 853, 227, 755, 363, 982, 899, 499, 161, 410, 359, 298, 156, 652, 358, 927, 780, 404, 500, 18, 576, 487, 936, 210, 956, 358, 33, 543, 416, 781, 170, 579, 583, 193, 289, 694, 270, 168, 95, 156, 933, 891, 585, 448, 741, 18, 175, 219, 837, 841, 253, 789, 918, 496, 573, 684, 960, 537, 559, 366, 74, 403, 497, 395, 968, 923, 795, 475, 203, 290, 166, 207, 91, 319, 475, 911, 904, 196, 171, 116, 506, 425, 266, 304, 544, 760, 53, 716, 158, 772, 911, 637, 722, 106, 647, 910, 550, 387, 649, 706, 10, 289, 954, 135, 509, 68, 393, 373, 369, 561, 692, 396, 198, 260, 62, 631, 510, 375, 327, 486, 32, 95, 120, 342, 742, 758, 766, 824, 301, 345, 525, 943, 965, 697, 75, 40, 136, 611, 877, 458, 763, 307, 415, 115, 295, 329, 295, 455, 96, 137, 365, 700, 439, 614, 883, 921, 897, 190, 916, 253, 137, 541, 480, 222, 606, 405, 323, 364, 701, 338, 195, 97, 994, 621, 710, 857, 168, 594, 193, 883, 595, 590, 308, 467, 365, 855, 524, 136, 430, 10, 163, 376, 585, 324, 9, 762, 563, 892, 93, 117, 869, 644, 53, 400, 87, 510, 847, 891, 375, 89, 686, 348]#[208, 432, 549, 48, 688, 747, 382, 4, 353, 272, 30, 523, 493, 733, 516, 516, 473, 453, 309, 148, 258, 55, 931, 195, 978, 590, 837, 681, 835, 984, 815, 166, 92, 281, 483, 409, 670, 205, 388, 278, 629, 506, 594, 205, 126, 194, 24, 478, 246, 624, 621, 11, 120, 37, 945, 276, 209, 723, 588, 792, 299, 807, 434, 795, 445, 81, 552, 898, 654, 787, 601, 187, 582, 890, 396, 3, 826, 327, 311, 470, 567, 270, 935, 629, 955, 447, 696, 89, 529, 805, 860, 921, 851, 62, 349, 713, 987, 27, 855, 264, 338, 617, 88, 952, 514, 434, 807, 146, 841, 178, 498, 463, 699, 87, 848, 642, 5, 513, 872, 77, 835, 928, 271, 432, 119, 51, 246, 122, 931, 673, 651, 722, 858, 327, 435, 758, 678, 89, 557, 463, 37, 306, 369, 611, 953, 636, 79, 318, 561, 343, 105, 791, 947, 196, 971, 196, 756, 38, 394, 449, 749, 326, 790, 745, 117, 838, 589, 631, 734, 258, 335, 702, 163, 314, 927, 659, 601, 971, 873, 333, 582, 945, 630, 92, 491, 171, 327, 56, 717, 317, 589, 843, 666, 471, 418, 289, 327, 522, 204, 348, 834, 773, 854, 372, 884, 543, 116, 278, 176, 577, 251, 366, 269, 397, 711, 360, 998, 267, 119, 111, 480, 4, 574, 717, 74, 585, 457, 235, 71, 444, 157, 179, 285, 815, 967, 581, 835, 856, 759, 131, 974, 715, 642, 580, 153, 364, 80, 381, 515, 590, 531, 966, 562, 72, 469, 716, 726, 718, 75, 51, 232, 835, 436, 565, 696, 737, 678, 904, 168, 65, 34, 173, 498, 374, 715, 626, 179, 990, 263, 893, 765, 20, 712, 142, 747, 363, 709, 421, 92, 471, 615, 361, 745, 174, 901, 720, 795, 191, 720, 942, 400, 748, 142, 692, 680, 355, 82, 305, 153, 650, 758, 821, 74, 761, 646, 825, 209, 771, 474, 280, 713, 803, 63, 829, 4, 402, 398, 599, 200, 537, 506, 961, 924, 363, 824, 981, 172, 721, 941, 989, 702, 290, 841, 596, 982, 244, 793, 704, 204, 150, 654, 867, 38, 119, 996, 455, 863, 715, 428, 818, 507, 353, 395, 440, 75, 788, 824, 182, 844, 426, 477, 958, 240]
#for i in range(373):
#    randomOpponent.append(randrange(1000))

game = Game(Player(values=bestEvolvedPlayer, depth=2), Player(values=randomOpponent, depth=2))#, display=False)
result = game.play()

print(result)

if result == "W":
    print(randomOpponent)
    print(game.moveCount)
input()
"""
from tkinter import *

def getColor(value):
    r = hex(int(0xFF * value/373))[-2:]
    g = "00"
    b = hex(int(0xFF * (373-value)/373))[-2:]
    v = ("#"+r+g+b).replace("x", "0")
    #print(v)
    return v

def display(canv, values):
    for i in range(len(values)):
        canv.create_line(i*3+1, 0, i*3+1, 30, width=3, fill=getColor(values[i]))
    canv.master.update()

root = Tk()
canv = Canvas(root, width=373*3, height=30)
canv.grid()

from GA import *

populationSize = 20  # even number
numberOfRounds = 10000
mutationParameter = 20  # standard deviation

Player.sigma = mutationParameter

players = instantiatePlayers(populationSize)
for round in range(numberOfRounds):
    if round == numberOfRounds - 2:
        root.deiconify()
    if round%50 == 49:
        display(canv, players[0][0].values)
        print("commencing round", round+1)
    Player.sigma = mutationParameter - round//500 + 1  # simulated annealing
    players = playRoundx(round, players)
    players = sorted(players, key=lambda x: -x[1])

    if round == numberOfRounds-1: break
    for index in range(populationSize // 2):
        index2 = randrange(populationSize//2-1)
        if index2 >= index:
            index2 += 1
        players[index+populationSize//2] = [players[index][0].createOffspring(players[index2 % (populationSize//2)][0]), 0]

print("best score is:", players[0][1])

input()
"""#"""
