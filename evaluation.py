__author__ = 'John'


class Evaluation(dict):

    def __init__(self, values=[]):
        self.values = values

        self["P"] = {0: [0,   5,   5, 0,   5, 10, 50, 0],
                     1: [0,  10,  -5, 0,   5, 10, 50, 0],
                     2: [0,  10, -10, 0,  10, 20, 50, 0],
                     3: [0, -20,   0, 20, 25, 30, 50, 0],
                     4: [0, -20,   0, 20, 25, 30, 50, 0],
                     5: [0,  10, -10, 0,  20, 20, 50, 0],
                     6: [0,  10,  -5, 0,   5, 10, 50, 0],
                     7: [0,   5,   5, 0,   5, 10, 50, 0],#48
                     "value": 100}

        self["R"] = {0: [0, -5, -5, -5, -5, -5,  5, 0],
                     1: [0,  0,  0,  0,  0,  0, 10, 0],
                     2: [0,  0,  0,  0,  0,  0, 10, 0],
                     3: [5,  0,  0,  0,  0,  0, 10, 0],
                     4: [5,  0,  0,  0,  0,  0, 10, 0],
                     5: [0,  0,  0,  0,  0,  0, 10, 0],
                     6: [0,  0,  0,  0,  0,  0, 10, 0],
                     7: [0, -5, -5, -5, -5, -5,  5, 0],#112
                     "value": 400}

        self["N"] = {0: [-50, -40, -30, -30, -30, -30, -40, -50],
                     1: [-40, -20,   5,   0,   5,   0, -20, -40],
                     2: [-30,   0,  10,  15,  15,  10,   0, -30],
                     3: [-30,   5,  15,  20,  20,  15,   0, -30],
                     4: [-30,   5,  15,  20,  20,  15,   0, -30],
                     5: [-30,   0,  10,  15,  15,  10,   0, -30],
                     6: [-40, -20,   5,   0,   5,   0, -20, -40],
                     7: [-50, -40, -30, -30, -30, -30, -40, -50],#176
                     "value": 300}

        self["B"] = {0: [-20, -10, -10, -10, -10, -10, -10, -20],
                     1: [-10,   5,  10,   0,   5,   0,   0, -10],
                     2: [-10,   0,  10,  10,   5,   5,   0, -10],
                     3: [-10,   0,  10,  10,  10,  10,   0, -10],
                     4: [-10,   0,  10,  10,  10,  10,   0, -10],
                     5: [-10,   0,  10,  10,   5,   5,   0, -10],
                     6: [-10,   5,  10,   0,   5,   0,   0, -10],
                     7: [-20, -10, -10, -10, -10, -10, -10, -20],#240
                     "value": 300}

        self["Q"] = {0: [-20, -10, -10, 0, -5, -10, -10, -20],
                     1: [-10,   0,   5, 0,  0,   0,   0, -10],
                     2: [-10,   5,   5, 5,  5,   5,   0, -10],
                     3: [-5,    0,   5, 5,  5,   5,   0,  -5],
                     4: [-5,    0,   5, 5,  5,   5,   0,  -5],
                     5: [-10,   5,   5, 5,  5,   5,   0, -10],
                     6: [-10,   0,   5, 0,  0,   0,   0, -10],
                     7: [-20, -10, -10, 0, -5, -10, -10, -20],#304
                     "value": 1000}

        self["K"] = {0: [20, 20, -10, -20, -30, -30, -30, -30],
                     1: [30, 20, -20, -30, -40, -40, -40, -40],
                     2: [10,  0, -20, -30, -40, -40, -40, -40],
                     3: [ 0,  0, -20, -40, -50, -50, -50, -50],
                     4: [ 0,  0, -20, -40, -50, -50, -50, -50],
                     5: [10,  0, -20, -30, -40, -40, -40, -40],
                     6: [30, 20, -20, -30, -40, -40, -40, -40],
                     7: [20, 20, -10, -20, -30, -30, -30, -30],#368
                     "value": 1000000}

        if values:
            pieces = "RNBQK"
            for row in range(8):
                self["P"][row] = [0]+values[row*6:row*6+6]
            for i in range(len(pieces)):
                for row in range(8):
                    self[pieces[i]][row] = values[48+i*64+row*8:56+i*64+row*8]
            self["P"]["value"] = values[368]
            for i in range(len(pieces)-1):
                self[pieces[i]]["value"] = values[369+i]

    def evaluate(self, board, color):
        total = 0
        for file in range(8):
            for rank in range(8):
                piece = board.board[file][rank].getPiece()
                if piece is not None and piece[0] == "W":
                    multiplier = 2*("W" == color)-1
                    type = piece[1]
                    total += self[type][file][rank] * multiplier
                    total += self[type]["value"] * multiplier
                elif piece is not None and piece[0] == "B":
                    multiplier = 2*("B" == color)-1
                    type = piece[1]
                    total += self[type][file][7-rank] * multiplier
                    total += self[type]["value"] * multiplier
        return total + 5
